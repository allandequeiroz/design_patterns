mvn clean install ; unzip eb-component/target/eb-services-0.9-SNAPSHOT.jar -d eb-component/target/ ; less eb-component/target/META-INF/MANIFEST.MF


This is the EntityBroker component and REST webapp for K2,
it uses the current stable EB impl jars from the maven 2 repository and then includes some K2 specific integration code
This should include very little actual code (I hope)

To build this (from the main source folder):
mvn clean install

To make this work in K2:
1) Add the component to K2:
There are a few options for doing this:
 A) Edit the bootstrap/localkernel.properties file and add in the path to the component jar to the end
  For example: component.locations=maven-repo:org.sakaiproject.kernel2.agnostic:component-sample:0.1-SNAPSHOT:jar;maven-repo:org.sakaiproject.k2.entitybroker:entitybroker-component:0.9-SNAPSHOT:jar;
  NOTE: Make sure the 0.9-SNAPSHOT version matches the current version of this project

 B) Set the shell environment variable SAKAI_KERNEL_PROPERTIES to point to the eb.properties file (in the root of this project).
  For example: export SAKAI_KERNEL_PROPERTIES=/opt/src/eb-k2/eb.properties
  (I use the following: export SAKAI_KERNEL_PROPERTIES=/opt/mytools/eb-k2/eb.properties)

 C) Copy the entitybroker-component-*.jar file over into k2components folder and add the path to localkernel.properties
  Edit bootstrap/localkernel.properties and add in the k2components directory like so (you can append this as well, use ";" to separate the parts):
  component.locations=k2components
  This directory can be created anywhere and will be accessed relative to where tomcat starts from. Create
  the directory in bootstrap/target/runtime/k2components (see note below).
  K2 creates a tomcat in bootstrap/target/runtime when you run "mvn -Prun" or "mvn -Poverlay-run-only"
  If you copy the jar file into bootstrap/target/runtime/k2components it will be started automatically by K2
  NOTE: You cannot rerun "mvn -Prun" or this will be deleted, use "mvn -Poverlay-run-only" or "mvn -Prun-only"

 D) (not currently working) You can set the Java system property (e.g. eb.properties) on the command line of the tomcat startup
  For example: mvn -Prun -Dsakai.kernel.properties=/opt/src/eb-k2/eb.properties
  (I use the following: mvn -Prun -Dsakai.kernel.properties=/opt/mytools/eb-k2/eb.properties)

2) Add the webapp to K2
 A) Copy the webapp into the bootstrap tomcat manually
  K2 creates a tomcat in bootstrap/target/runtime when you run "mvn -Prun" or "mvn -Poverlay-run-only"
  If you copy the war file into bootstrap/target/runtime/webapps it will be started automatically by tomcat
  NOTE: You cannot rerun "mvn -Prun" or this will be deleted, use "mvn -Poverlay-run-only" or "mvn -Prun-only"

 B) Put the EB webapp in the webapps-assembly/pom.xml:
  <name>webapps-assembly</name>
  ...
  <artifactId>webapps-assembly</artifactId>
  ...
  <dependencies>
    ...
    <dependency>
      <groupId>org.sakaiproject.k2.entitybroker</groupId>
      <artifactId>direct</artifactId>
      <version>0.9-SNAPSHOT</version><!--NOTE: version must match the released version from eb-webapp/pom.xml-->
      <type>war</type>
    </dependency>
  </dependencies>

3) Build and run K2 (from the K2 source folder)
mvn clean install
mvn -Prun OR mvn -Poverlay-run-only OR mvn -Prun-only
 NOTE: it is important to run the 2 mvn commands separately, you will have to rerun the first one each time
       the K2 code is updated and only run the second one each time you want to run the K2 server
 NOTE: you may be adding stuff to the run command if you use option 1B or 1C from above
 NOTE: If you run "mvn -Prun" it deletes the tomcat and remakes it and will also delete any changes you made,
 make sure that you use "mvn -Poverlay-run-only" or "mvn -Prun-only" if you made any changes

How to check if it is working:
Go to the /direct URL for your server, you should see the entity description page which will show information about entities and REST in K2.

More info here:
http://confluence.sakaiproject.org/confluence/display/SAKDEV/Entity+Provider+and+Broker

-AZ
